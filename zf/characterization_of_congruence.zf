# $Id$

include "tarski_def.zf".
include "tarski_col.zf".
include "tarski_col_bis.zf".
include "tarski_cong.zf".

val O : point.
val E : point.
val E1 : point.

#17_20
assert forall (M A B : point). col A M B => cong M A M B => A=B || midpoint M A B.

#diff_ar2
assert forall (O E E1 A B AMB : point). diff O E E1 A B AMB => ar2 O E E1 A B AMB.

#is_length_exists
assert forall (O E E1 X Y : point). ~col O E E1 => (exists (XY : point). is_length O E E1 X Y XY).

#midpoint_opp
assert forall (O E E1 A B : point). ar2 O E E1 O A B => midpoint O A B => opp O E E1 A B.

#opp_comm
assert forall (X Y : point). opp O E E1 X Y => opp O E E1 Y X.

#opp_exists
assert forall (A : point). col O E A => (exists (MA : point). opp O E E1 A MA).

#opp_midpoint
assert forall (O E E1 A MA : point). opp O E E1 A MA => midpoint O A MA.

#opp_prod
assert forall (O E E1 ME X MX : point). opp O E E1 E ME => opp O E E1 X MX => prod O E E1 X ME MX.

#prod_1_1
assert forall (O E E1 A : point). ~col O E E1 => col O E A => prod O E E1 E A A.

#prod_assoc1
assert forall (O E E1 A B C AB BC ABC : point). prod O E E1 A B AB => prod O E E1 B C BC => (prod O E E1 A BC ABC => prod O E E1 AB C ABC).

#prod_assoc2
assert forall (O E E1 A B C AB BC ABC : point). prod O E E1 A B AB => prod O E E1 B C BC => (prod O E E1 AB C ABC => prod O E E1 A BC ABC).

#prod_exists
assert forall (A B : point). col O E A => col O E B => (exists (C : point). prod O E E1 A B C). 

#prod_uniqueness
assert forall (A B C1 C2 : point). prod O E E1 A B C1 => prod O E E1 A B C2 => C1=C2.

#square_distance_formula
assert forall (O E E1 S U1 U2 P PX PY Q QX QY PQ PQ2 PXMQX PYMQY PXMQX2 PYMQY2 F : point). cd O E S U1 U2 P PX PY => cd O E S U1 U2 Q QX QY => prod O E E1 PQ PQ PQ2 => diff O E E1 PX QX PXMQX => prod O E E1 PXMQX PXMQX PXMQX2 => prod O E E1 PYMQY PYMQY PYMQY2 => diff O E E1 PY QY PYMQY => sum O E E1 PXMQX2 PYMQY2 F => PQ2=F.

goal forall (O E E1 S U1 U2 A AX AY B BX BY C CX CY D DX DY AXMBX AXMBX2 AYMBY AYMBY2 AB2 CXMDX CXMDX2 CYMDY CYMDY2 CD2 : point). cd O E S U1 U2 A AX AY => cd O E S U1 U2 B BX BY => cd O E S U1 U2 C CX CY => cd O E S U1 U2 D DX DY => diff O E E1 AX BX AXMBX => prod O E E1 AXMBX AXMBX AXMBX2 => diff O E E1 AY BY AYMBY => prod O E E1 AYMBY AYMBY AYMBY2 => sum O E E1 AXMBX2 AYMBY2 AB2 => diff O E E1 CX DX CXMDX => prod O E E1 CXMDX CXMDX CXMDX2 => diff O E E1 CY DY CYMDY => prod O E E1 CYMDY CYMDY CYMDY2 => sum O E E1 CXMDX2 CYMDY2 CD2 => (cong A B C D <=> AB2 = CD2).
