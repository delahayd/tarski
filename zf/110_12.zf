# $Id$

include "tarski_def.zf".
include "tarski_col.zf".
include "tarski_perp.zf".

#17_2
assert forall (M A B : point). midpoint M A B => midpoint M B A.

#17_9
assert forall (P Q A X : point). midpoint A P X => midpoint A Q X => P=Q.

#17_13 
assert forall (A P Q P1 Q1 : point). midpoint A P1 P => midpoint A Q1 Q => cong P Q P1 Q1.

#17_20
assert forall (M A B : point). col A M B => cong M A M B => A=B || midpoint M A B.

#18_2
assert forall (A B C : point). per A B C => per C B A.

#18_3
assert forall (A B C A1 : point). per A B C => A!=B=> col B A A1 => per A1 B C.

#18_10
assert forall (A B C A B C A1 B1 C1 : point). per A B C => cong_3 A B C A1 B1 C1 => per A1 B1 C1.

#110_4_spec
assert forall (A B P P1 : point). reflectL P P1 A B => reflectL P1 P A B.

#110_6_existence_spec
assert forall (A B P1 : point). A!=B => (exists (P : point). reflectL P1 P A B).


#110_10_spec
assert forall (A B P Q P1 Q1 : point). A!=B => reflectL P1 P A B => reflectL Q1 Q A B => cong P Q P1 Q1.

#col_per_perp
assert forall (A B C D : point). A!=B => B!=C => D!=B => D!=C => col B C D => per A B C => perp C D A B.

#cong_commutativity
assert forall (A B C D : point). cong A B C D => cong B A D C.

#cong_symmetry
assert forall (A B C D : point). cong A B C D => cong C D A B.

#cong_transitivity
assert forall (A B C D E F : point). cong A B C D => cong C D E F => cong A B E F.

#image_col
assert forall (A B X : point). col A B X => reflectL X X A B.

#image_preserves_per
assert forall (A B C A1 B1 C1 X Y : point). X!=Y => reflectL A A1 X Y => reflectL B B1 X Y => reflectL C C1 X Y => per A B C => per A1 B1 C1.

#is_image_spec_dec
assert forall (A B C D : point). reflectL A B C D || ~reflectL A B C D.

#is_image_spec_col_cong
assert forall (A B P P1 X : point). reflectL P P1 A B => col A B X => cong P X P1 X.

#midpoint_col
assert forall (A M B : point). midpoint M A B => col M A B.

#midpoint_existence
assert forall (A B : point). (exists (X : point). midpoint X A B).

#midpoint_distinct_1
assert forall (I A B : point). A!=B => midpoint I A B => I!=A && I!=B.

#per_per_col
assert forall (A B C X : point). per A X C => X!=C => per B X C => col A B X.

#symmetric_point_uniqueness
assert forall (A P P1 P2 : point). midpoint P A P1 => midpoint P A P2 => P1=P2.

goal forall (A B C A1 B1 C1 : point). per A B C => per A1 B1 C1 => cong A B A1 B1 => cong B C B1 C1 => cong A C A1 C1.
