# $Id$

include "tarski_def.zf".
include "tarski_conga.zf".
include "tarski_out.zf".
include "tarski_bet.zf".
include "tarski_prop_bet.zf".
include "tarski_side.zf".
include "tarski_col.zf".
include "tarski_cong.zf".

#14_6
assert forall (A B C A1 B1 C1 : point). bet A B C => cong_3 A B C A1 B1 C1 => bet A1 B1 C1.

#15_1
assert forall (A B C D : point). A!=B => bet A B C => bet A B D => bet A C D || bet A D C.

#111_10
assert forall (A B C D E F A1 C1 D1 F1 : point). congA A B C D E F => out B A1 A => out B C1 C => out E D1 D => out E F1 F => congA A1 B C1 D1 E F1.

#111_22b
assert forall (A B C P A1 B1 C1 P1 : point). os B P A C && os B1 P1 A1 C1 && congA A B P A1 B1 P1 && congA P B C P1 B1 C1 => congA A B C A1 B1 C1.

#111_25
assert forall (P A B C A1 C1 P1 : point). inAngle P A B C => out B A1 A => out B C1 C => out B P P1 => inAngle P1 A1 B C1.

#angle_construction_1
assert forall (A B C A1 B1 P : point). ~col A B C => ~col A1 B1 P => (exists (C1 : point). congA A B C A1 B1 C1 && os A1 B1 C1 P).

#angle_construction_3
assert forall (A B C A1 B1 C1 : point). A!=B => C!=B => A1!=B1 => (exists (C1 : point). congA A B C A1 B1 C1).

#bet_conga_bet
assert forall (A B C A1 B1 C1 : point). bet A B C => congA A B C A1 B1 C1 => bet A1 B1 C1.
#cong2_conga_cong
assert forall (A B C A1 B1 C1 : point). congA A B C A1 B1 C1 => cong A B A1 B1 => cong B C B1 C1 => cong A C A1 C1.
#conga_trans
assert forall (A B C A1 B1 C1 A2 B2 C2 : point). congA A B C A1 B1 C1 => congA A1 B1 C1 A2 B2 C2 => congA A B C A2 B2 C2.

#in_angle_line
assert forall (A B C P : point). P!=B => A!=B => C!=B => bet A B C => inAngle P A B C.

#in_angle_one_side
assert forall (A B C P : point). ~col A B C => ~col B A P => inAngle P A B C => os A B P C.

#in_angle_trivial_1
assert forall (A B C : point). A!=B => C!=B => inAngle A A B C.

#in_angle_trivial_2
assert forall (A B C : point). A!=B => C!=B => inAngle C A B C.

#ncol_conga-ncol
assert forall (A B C D E F : point). ~col A B C => congA A B C D E F => ~col D E F.

#out_in_angle_out
assert forall (A B C P : point). out B A C => inAngle P A B C => out B A P.

#segment_construction_3
assert forall (A B X Y : point). A!=B => X!=Y => (exists (C : point). out A B C && cong A C X Y).

goal forall (A B C D E F : point). (exists (Q : point). inAngle C A B Q && congA A B Q D E F) => leA A B C D E F.
