#$Id$

include "tarski_def.zf".

#14_2
assert forall (A B C D A1 B1 C1 D1 : point). ifsc A B C D A1 B1 C1 D1 => cong B D B1 D1.

#14_3
assert forall (A B C A1 B1 C1 : point). bet A B C => bet A1 B1 C1 => cong A C A1 C1 => cong B C B1 C1 => cong B A B1 A1.

#14_5
assert forall (A B C A1 C1 : point). bet A B C => cong A C A1 C1 => (exists (B1 : point). bet A1 B1 C1 && cong_3 A B C A1 B1 C1).

#14_6
assert forall (A B C A1 B1 C1 : point). bet A B C => cong_3 A B C A1 B1 C1 => bet A1 B1 C1.

#14_16
assert forall (A B C D A1 B1 C1 D1 : point). fsc A B C D A1 B1 C1 D1 => A!=B => cong C D C1 D1.

#15_1
assert forall (A B C D : point). A!=B => bet A B C => bet A B D => bet A C D || bet A D C.

#15_2
assert forall (A B C D : point). A!=B => bet A B C => bet A B D => bet B C D || bet B D C.

#15_3
assert forall (A B C D : point). bet A B D => bet A C D => bet A B C || bet A C B.

#15_6
assert forall (A B C D A1 B1 C1 D1 : point). le A B C D => cong A B A1 B1 => cong C D C1 D1 => le A1 B1 C1 D1.

#15_12_b
assert forall (A B C : point). col A B C => le A B A C => le B C A C => bet A B C.

#16_2
assert forall (A B C P : point). A!=P => B!=P => C!=P => bet A P C => (bet B P C <=> out P A B).

#16_6
assert forall (P A B : point). out P A B => out P B A.

#16_7
assert forall (P A B C : point). out P A B => out P B C => out P A C. 

#16_11_existence
assert forall (A B C R : point). R!=A => B!=C => (exists (X : point). out A X R && cong A X B C).

#16_11_uniqueness
assert forall (A B C R X Y : point). R!=A => B!=C => out A X R => cong A X B C => out A Y R => cong A Y B C => X=Y.

#16_13_1
assert forall (P A B : point). out P A B => le P A P B => bet P A B.

#16_21
assert forall (A B C D P Q : point). ~col A B C => C!=D => col A B P => col A B Q => col C D P => col C D Q => P=Q.

#17_2
assert forall (M A B : point). midpoint M A B => midpoint M B A.

#17_3
assert forall (M A : point). midpoint M A A => M=A.

#17_17
assert forall (P P1 A B : point). midpoint A P P1 => midpoint B P P1 => A=B.

#17_20_bis
assert forall (M A B : point). A!=B => col A M B => cong M A M B => midpoint M A B.

#18_2
assert forall (A B C : point). per A B C => per C B A.

#18_3
assert forall (A B C A1 : point). per A B C => A!=B=> col B A A1 => per A1 B C.

#18_7
assert forall (A B C : point). per A B C => per A C B => B=C.

#18_10
assert forall (A B C A B C A1 B1 C1 : point). per A B C => cong_3 A B C A1 B1 C1 => per A1 B1 C1.

#18_14_2_1a
assert forall (X A B C D : point). perp_at X A B C D => perp A B C D.

#18_14_3
assert forall (A B C D X Y : point). perp_at X A B C D => perp_at Y A B C D => X=Y.

#18_18_existence
assert forall (A B C : point). ~col A B C => (exists (X : point). col A B X && perp A B C X).


#19_5
assert forall (P Q A C R B : point). ts P Q A C => col R P Q => out R A B => ts P Q B C.

#19_8_1
assert forall (P Q A B C : point). ts P Q A C => ts P Q B C => os P Q A B.

#19_8_2
assert forall (P Q A B C : point). ts P Q A C => os P Q A B => ts P Q B C.

#19_9
assert forall (P Q A B : point). ts P Q A B => ~os P Q A B.

#19_19
assert forall (X Y A B P : point). X!=Y => col X Y P => col A B P => (os X Y A B <=> (out P A B && ~col X Y A)).

#19_31
assert forall (A X Y Z : point). os A X Y Z => os A Z Y X => ts A Y X Z.

#110_6_uniqueness_spec
assert forall (A B P P1 P2 : point). reflectL P P1 A B => reflectL P P2 A B => P1=P2.

#110_8
assert forall (A B P : point). reflect P P A B => col P A B.

#110_12
assert forall (A B C A1 B1 C1 : point). per A B C => per A1 B1 C1 => cong A B A1 B1 => cong B C B1 C1 => cong A C A1 C1.

#110_14
assert forall (P P1 A B : point). P!=P1 => A!=B => reflect P P1 A B => ts A B P P1.

#111_3_bis
assert forall (A B C D E F : point). (exists (A1 C1 D1 F1 : point). out B A1 A && out B C1 C && out E D1 D && out E F1 F && cong_3 A1 B C1 D1 E F1) => congA A B C D E F.

#111_3
assert forall (A B C D E F : point). congA A B C D E F => (exists (A1 C1 D1 F1 : point). out B A1 A && out B C C1 && out E D1 D && out E F F1 && cong_3 A1 B C1 D1 E F1).

#111_4_1
assert forall (A B C D E F : point). congA A B C D E F => A!=B && C!=B && D!=E && F!=E && (forall (A1 C1 D1 F1 : point). out B A1 A && out B C1 C && out E D1 D && out E F1 F && cong B A1 E D1 && cong B C1 E F1 => cong A1 C1 D1 F1).

#111_4_2
assert forall (A B C D E F : point). (A!=B && C!=B && D!=E && F!=E && (forall (A1 C1 D1 F1 : point). out B A1 A && out B C1 C && out E D1 D && out E F1 F && cong B A1 E D1 && cong B C1 E F1 => cong A1 C1 D1 F1)) => congA A B C D E F.

#111_10
assert forall (A B C D E F A1 C1 D1 F1 : point). congA A B C D E F => out B A1 A => out B C1 C => out E D1 D => out E F1 F => congA A1 B C1 D1 E F1.

#111_13
assert  forall (A B C D E F A1 D1 : point). congA A B C D E F => bet A B A1 => A1!=B => bet D E D1 => D1!=E => congA A1 B C D1 E F.

#111_16
assert forall (A B C A1 B1 C1 : point). per A B C => A!=B => C!=B => per A1 B1 C1 => A1!=B1 => C1!=B1 => congA A B C A1 B1 C1.

#111_17
assert forall (A B C A1 B1 C1 : point). per A B C => congA A B C A1 B1 C1 => per A1 B1 C1.

#111_18_1
assert forall (A B C D : point). bet C B D => B!=C => B!=D => A!=B => per A B C => congA A B C A B D.

#111_18_2
assert forall (A B C D : point). bet C B D => congA A B C A B D => per A B C.

#111_21_a
assert forall (A B C A1 B1 C1 : point). out B A C => congA A B C A1 B1 C1 => out B1 A1 C1.

#111_21_b
assert forall (A B C A1 B1 C1 : point). out B A C => out B1 A1 C1 => congA A B C A1 B1 C1.

#111_22_bet
assert forall (A B C P A1 B1 C1 P1 : point). bet A B C => ts P1 B1 A1 C1 => congA A B P A1 B1 P1 && congA P B C P1 B1 C1 => bet A1 B1 C1.

#111_22a
assert forall (A B C P A1 B1 C1 P1 : point). ts B P A B && ts B1 P1 A1 C1 && congA A B P A1 B1 P1 && congA P B C P1 B1 C1 => congA A B C A1 B1 C1.

#111_22b
assert forall (A B C P A1 B1 C1 P1 : point). os B P A C && os B1 P1 A1 C1 && congA A B P A1 B1 P1 && congA P B C P1 B1 C1 => congA A B C A1 B1 C1.

#111_24
assert forall (P A B C : point). inAngle P A B C => inAngle P C B A.

#111_25_aux
assert forall (P A B C A1 : point). inAngle P A B C => ~bet A B C => out B A1 A => inAngle P A1 B C.

#111_25
assert forall (P A B C A1 C1 P1 : point). inAngle P A B C => out B A1 A => out B C1 C => out B P P1 => inAngle P1 A1 B C1.

#111_29_a
assert forall (A B C D E F : point). leA A B C D E F => (exists (Q : point). inAngle C A B Q && congA A B Q D E F).

#111_29_b
assert forall (A B C D E F : point). (exists (Q : point). inAngle C A B Q && congA A B Q D E F) => leA A B C D E F.

#111_30
assert forall (A B C D E F A1 B1 C1 D1 E1 F1 : point). leA A B C D E F => congA A B C A1 B1 C1 => congA D E F D1 E1 F1 => leA A1 B1 C1 D1 E1 F1.

#111_31_1
assert forall (A B C D E F : point). out B A C => D!=E => F!=E => leA A B C D E F.

#111_31_2
assert forall (A B C D E F : point). A!=B => C!=B => D!=E => F!=E => bet D E F =>leA A B C D E F.

#111_36
assert forall (A B C D E F A1 D1 : point). A!=B => A1!=B => D!=E => D1!=E => bet A B A1 => bet D E D1 => (leA A B C D E F <=> leA D1 E F A1 B C).

#111_41_aux
assert forall (A B C D : point). ~col A B C => bet A B D => A!=D => ltA A C B C A D.

#111_41
assert forall (A B C D : point). ~col A B C => bet A B D => A!=D => ltA A C B C A D && ltA A B C C A D.

#111_43
assert forall (A B C : point). ~col A B C => (per B A C || obtuse B A C) => acute A B C && acute A C B.

#111_44_1_a
assert forall (A B C : point). ~col A B C => cong B A B C => congA B A C B C A.

#111_44_2_a
assert forall (A B C : point). ~col A B C => lt B A B C => ltA B C A B A C.

#111_44_2_b
assert forall (A B C : point). ~col A B C => ltA B A C B C A => lt B C B A.

#111_44_1
assert forall (A B C : point). ~col A B C => (congA B A C B C A <=> cong B A B C).

#111_44_2
assert forall (A B C : point). ~col A B C => (ltA B A C B C A <=> lt B C B A).

#111_46
assert forall (A B C : point). ~col A B C => (per A B C || obtuse A B C) => lt B A A C && lt B C A C.

#111_51
assert forall (A B C A1 B1 C1 : point). A!=B => A!=C => B!=C => cong A B A1 B1 => cong A C A1 C1 => cong B C B1 C1 => congA B A C B1 A1 C1 && congA A B C A1 B1 C1 && congA B C A B1 C1 A1.

#111_52
assert forall (A B C A1 B1 C1 : point). congA A B C A1 B1 C1 => cong A C A1 C1 => cong B C B1 C1 => le B C A C => cong B A B1 A1 && congA B A C B1 A1 C1 && congA B C A B1 C1 A1.

#111_aux
assert forall (B A A1 A0 E D D1 D0 : point). out B A A1 => out E D D1 => cong B A1 E D1 => bet B A A0 => bet E D D0 => cong A A0 E D => cong D D0 B A => cong B A0 E D0 && cong A1 A0 D1 D0.

############################"A"##########################

#acute_chara
assert forall (A B C A1 : point). bet A B A1 => B!=A1 => (acute A B C <=> ltA A B C A1 B C).

#acute_conga_acute
assert forall (A B C D E F : point). acute A B C => congA A B C D E F => acute D E F.

#acute_obtuse_lta
assert forall (A B C D E F : point). acute A B C => obtuse D E F => ltA A B C D E F.

#acute_lea_acute
assert forall (A B C D E F : point). acute D E F => leA A B C D E F => acute A B C.

#acute_per_lta
assert forall (A B C D E F : point). acute A B C => D!=E => E!=F => per D E F => ltA A B C D E F.

#acute_sym
assert forall (A B C : point). acute A B C => acute C B A.

#all_coplanar
assert forall (A B C D : point). coplanar A B C D.

#angle_construction_1
assert forall (A B C A1 B1 P : point). ~col A B C => ~col A1 B1 P => (exists (C1 : point). congA A B C A1 B1 C1 && os A1 B1 C1 P).

#angle_construction_2
assert forall (A B C A1 B1 P : point). A!=B => A!=C => B!=C => A1!=B1 => ~col A1 B1 P => (exists (C1 : point). congA A B C A1 B1 C1 && (os A1 B1 C1 P || col A1 B1 C1)).

#angle_construction_3
assert forall (A B C A1 B1 C1 : point). A!=B => C!=B => A1!=B1 => (exists (C1 : point). congA A B C A1 B1 C1).

#angle_partition
assert forall (A B C : point). A!=B => B!=C => acute A B C || per A B C || obtuse A B C.

###########################"B"################################

#bet_acute_obtuse
assert forall (A B C A1 : point). bet A B A1 => A1!=B => acute A B C => obtuse A1 B C.

#bet_conga_bet
assert forall (A B C A1 B1 C1 : point). bet A B C => congA A B C A1 B1 C1 => bet A1 B1 C1.

#bet_in_angle_bet
assert forall (A B C P : point). bet A B P => inAngle P A B C => bet A B C.

#bet_lea_bet
assert forall (A B C D E F : point). bet A B C => leA A B C D E F => bet D E F.

#bet_le_eq
assert forall (A B C : point). bet A B C => le A C B C => A=B.

#bet_le_lt
assert forall (A B C D : point). bet A B D => A!=D => D!=B => le A C B C => lt D C B C.

#bet_obtuse
assert forall (A B C : point). bet A B C => A!=B => B!=C => obtuse A B C.

#bet_obtuse_acute
assert forall (A B C A1 : point). bet A B A1 => A1!=B => obtuse A B C => acute A1 B C.

#bet_out_out_bet
assert forall (A B C A1 C1 : point). bet A B C => out B A A1 => out B C C1 => bet A1 B C1.

#bet2_lta_lta
assert forall (A B C D E F A1 D1 : point). ltA A B C D E F => bet A B A1 => A1!=B => bet D E D1 => D1 !=E => ltA D1 E F A1 B C.

#bet2_out_out
assert forall (A B C B1 C1 : point). B!=A => B1!=A => out A C C1 => bet A B C => bet A B1 C1 => out A B B1.

#between_cong
assert forall (A B C : point). bet A C B => cong A C A B => C=B.

###########################"C"#########################################

#col13
assert forall (X Y A B C : point). X!=Y => col X Y A => col X Y B => col X Y C => col A B C.

#col_conga_col
assert forall (A B C D E F : point). col A B C => congA A B C D E F => col D E F.

#col_inangle2_out
assert forall (A B C P Q : point). ~bet A B C => inAngle P A B C => inAngle Q A B C =>col B P Q => out B P Q.

#col_in_angle
assert forall (A B C P : point). A!=B => C!=B => P!=B => out B A P || out B C P => inAngle P A B C.

#col_in_angle_out
assert  forall (A B C P : point). col B A P => ~bet A B C => inAngle P A B C => out B A P.

#col_one_side
assert forall (A B C P Q : point). col A B C => A!=C => os A B P Q => os A C P Q.

#col_one_side_out
assert forall (A B X Y : point). col A X Y => os A B X Y => out A X Y.

#col_out2_col
assert forall (A B C AA CC : point). col A B C => out B A AA => out B C CC => col AA B CC.

#col_refl
assert forall (A B P : point). col P A B => reflectL P P A B.

#col_two_sides
assert forall (A B C P Q : point). col A B C => A!=C => ts A B P Q => ts A C P Q.

#cong2_conga_cong
assert forall (A B C A1 B1 C1 : point). congA A B C A1 B1 C1 => cong A B A1 B1 => cong B C B1 C1 => cong A C A1 C1.

#cong2_lt_lt
assert forall (A B C D A1 B1 C1 D1 : point). lt A B C D => cong A B A1 B1 =>cong C D C1 D1 => lt A1 B1 C1 D1.

#cong3_conga
assert forall (A B C A1 B1 C1 : point). A!=B => C!=B => cong_3 A B C A1 B1 C1 => congA A B C A1 B1 C1.

#cong3_conga2
assert forall (A B C A1 B1 C1 A1 B2 C2 : point). cong_3 A B C A1 B1 C1 => congA A B C A2 B2 C2 => congA A1 B1 C1 A2 B2 C2.

#cong3_diff
assert forall (A B C A1 B1 C1 : point). A!=B => cong_3 A B C A1 B1 C1 => A1!=B1.

#cong3_diff2
assert forall (A B C A1 B1 C1 : point). C!=B => cong_3 A B C A1 B1 C1 => C1!=B1.

#cong3_preserves_out
assert  forall (A B C A1 B1 C1 : point). out A B C => cong_3 A B C A1 B1 C1 => out A1 B1 C1.

#conga_acute
assert forall (A B C : point). congA A B C A C B => acute A B C.

#conga_diff45
assert forall (A B C A1 B1 C1 : point). congA A B C A1 B1 C1 => A1!=B1.

#conga_diff56
assert forall (A B C A1 B1 C1 : point). congA A B C A1 B1 C1 => C1!=B1.

#conga_distinct
assert forall (A B C D E F : point). congA A B C D E F => congA A B C D E F && A!=B && C!=B && D!=E && F!=E.

#conga_inangle_per_acute
assert forall (A B C P : point). per A B C => inAngle P A B C => congA P B A P B C => acute A B P.

#conga_lea
assert forall (A B C D E F : point). congA A B C D E F => leA A B C D E F.

#conga_line
assert forall (A B C A1 B1 C1 : point). A!=B => B!=C => A1 !=B1 => B1!=C1 => bet A B C => bet A1 B1 C1 => congA A B C A1 B1 C1.

#conga_or_out_ts
assert forall (A B C C1 : point). congA A B C A1 B1 C1 => out B C C1 || ts A B C C1.

#conga_pseudo_refl
assert forall (A B C : point). A!=B => C!=B => congA A B C C B A.

#conga_preserves_in_angle
assert orall (A B C I A1 B1 C1 I1 : point). congA A B C A1 B1 C1 => congA A B I A1 B1 I1 => inAngle I A B C => os A1 B1 I1 C1 => inAngle I1 A1 B1 C1.

#conga_preserves_gta
assert forall (A B C D E F A1 B1 C1 D1 E1 F1 : point). congA A B C A1 B1 C1 => congA D E F D1 E1 F1 =>  gtA A B C D E F => gtA A1 B1 C1 D1 E1 F1.

#conga_preserves_lta
assert forall (A B C D E F A1 B1 C1 D1 E1 F1 : point). congA A B C A1 B1 C1 => congA D E F D1 E1 F1 => ltA A B C D E F => ltA A1 B1 C1 D1 E1 F1.

#conga_refl
assert forall (A B C : point). A!=B => C!=B => congA A B C A B C.

#conga_sym
assert forall (A B C A1 B1 C1 : point). congA A B C A1 B1 C1 => congA A1 B1 C1 A B C.

#conga_trans
assert forall (A B C A1 B1 C1 A2 B2 C2 : point). cong A B C A1 B1 C1 => congA A1 B1 C1 A2 B2 C2 => congA A B C A2 B2 C2.

#conga_right_comm
assert forall (A B C D E F : point). congA A B C D E F => congA A B C F E D.

#conga_left_comm
assert forall (A B C D E F : point). congA A B C D E F => congA C B A D E F.

#cong_preserves_bet
assert forall (B A1 A0 E D1 D0 : point). bet B A1 A0 => cong B A1 E D1 => cong B A0 E D0 => out E D1 D0 => bet E D1 D0.

###############################"E"#####################

#eq_conga_out
assert forall (A B D E F : point). congA A B A D E F => out E D F.

#ex_per_cong
assert forall (A B C D X Y : point). A!=B => X!=Y => col A B C => ~col A B D => (exists (P : point). per P C A && cong P C X Y && os A B P D).



##############################"I"#######################

#inangle3123
assert forall (A B C : point). A!=B => C!=B => inAngle C A B C.

#inangle1123
assert forall (A B C : point). A!=B => C!=B => inAngle A A B C.

#inangle_distincts
assert forall (A B C P : point). inAngle P A B C => A!=B && C!=B && P!=B.

#inangle_one_side
assert forall (A B C P Q : point). ~col A B C => ~col A B P => ~col A B Q => inAngle P A B C => inAngle Q A B C => os A B P Q.

#in_angle_asym
assert forall (A B C D : point). inAngle D A B C => inAngle C A B D => congA A B C A B D.

#in_angle_line
assert forall (A B C P : point). P!=B => A!=B => C!=B => bet A B C => inAngle P A B C.

#in_angle_one_side
assert forall (A B C P : point). ~col A B C => ~col B A P => inAngle P A B C => os A B P C.

#in_angle_out
assert forall (A B C P : point). out B A C => inAngle P A B C => out B A P.

#in_angle_reverse
assert forall (A B A1 C D : point). A1!=B => bet A B A1 => inAngle C A B D => inAngle D A1 B C.

#in_angle_trans
assert forall (A B C D E : point). inAngle C A B D => inAngle D A B E => inAngle C A B E.

#in_angle_trivial_1
assert forall (A B C : point). A!=B => C!=B => inAngle A A B C.

#in_angle_trivial_2
assert forall (A B C : point). A!=B => C!=B => inAngle C A B C.

#in_angle_two_sides
assert forall (A B C P : point). ~col B A P => ~col B C P => inAngle P A B C => ts P B A C.

#is_image_is_image_spec
assert forall (P P1 A B : point). A!=B => (reflect P1 P A B <=> reflectL P1 P A B ).

#is_midpoint_id
assert forall (A B : point). midpoint A A B => A=B.

############################"L"###########################

#le3456_lt_lt
assert forall (A B C D E F : point). lt A B C D => le C D E F => lt A B E F.

#le_transitivity
assert forall (A B C D E F : point). le A B C D => le C D E F => le A B E F.

#lea123456_lta_lta
assert forall (A B C D E F G H I : point). leA A B C D E F => ltA D E F G H I => ltA A B C G H I.

#lea456789_lta_lta
assert forall (A B C D E F G H I : point). ltA A B C D E F => leA D E F G H I => ltA A B C G H I.

#lea_asym
assert forall (A B C D E F : point). leA A B C D E F => leA D E F A B C => congA A B C D E F.

#lea_dec
assert forall (A B C D E F : point). leA A B C D E F || ~leA A B C D E F.

#lea_distincts
assert forall (A B C D E F : point). leA A B C D E F => A!=B && C!=B && D!=E && F!=E.

#lea_in_angle
assert forall (A B C P : point). leA A B P A B C => os A B C P => inAngle P A B C.

#lea_line
assert forall (A B C P : point). bet  A B P => leA A B P A B C => bet  A B C.

#lea_nlta
assert forall (A B C D E F : point). leA A B C D E F => ~ltA D E F A B C.

#lea_right_comm
assert forall (A B C D E F : point). leA A B C D E F => leA A B C F E D.

#lea_left_comm
assert forall (A B C D E F : point). leA A B C D E F => leA C B A D E F.

#lea_total
assert forall (A B C D E F : point). A!=B => B!=C => D!=E => E!=F => leA A B C D E F || leA D E F A B C.

#lea_trans
assert forall (A B C A1 B1 C1 A2 B2 C2 : point). leA A B C A1 B1 C1 => leA A1 B1 C1 A2 B2 C2 => leA A B C A2 B2 C2.

#lt_left_comm
assert forall (A B C D : point). lt A B C D => lt B A C D.

#lt_right_comm
assert forall (A B C D : point). lt A B C D => lt A B D C.

#lt_comm
assert forall (A B C D : point). lt A B C D => lt B A D C.

#lta_dec
assert forall (A B C D E F : point). ltA A B C D E F || ~ltA A B C D E F.

#lta_diff
assert forall (A B C D E F : point). ltA A B C D E F => ltA A B C D E F && A!=B && C!=B && D!=E && F!=E.

#lta_distincts
assert forall (A B C D E F : point). ltA A B C D E F => A!=B && C!=B && D!=E && F!=E.

#lta_lea
assert forall (A B C D E F : point). ltA A B C D E F => leA A B C D E F.

#lta_not_conga
assert forall (A B C D E F : point). A!=B => C!=B => D!=E => F!=E => ltA A B C D E F => ~congA A B C D E F.

#lta_comm
assert forall (A B C D E F : point). ltA A B C D E F => ltA C B A F E D.

#lta_left_comm
assert forall (A B C D E F : point). ltA A B C D E F => ltA C B A D E F.

#lta_right_comm
assert forall (A B C D E F : point). ltA A B C D E F => ltA A B C F E D.

#lta_trans
assert forall (A B C A1 B1 C1 A2 B2 C2 : point). ltA A B C A1 B1 C1 => ltA A1 B1 C1 A2 B2 C2 => ltA A B C A2 B2 C2.

###########################"M"#######################

#midpoint_existence
assert forall (A B : point). exists (X : point). midpoint X A B.

############################"N"#####################

#ncol_conga-ncol
assert forall (A B C D E F : point). ~col A B C => congA A B C D E F => ~col D E F.

#nlea_lta
assert forall (A B C D E F : point). ~leA A B C D E F => A!=B => B!=C => D!=E => E!=F => ltA D E F A B C.

#nlta
assert forall (A B C : point). ~ltA A B C A B C.

#not_and_lt
assert forall (A B C D : point). ~(lt A B C D && lt C D A B).

#not_and_lta
assert forall (A B C D E F : point). ~(ltA A B C D E F && ltA D E F A B C).

#not_bet_and_out
assert forall (A B C : point). ~(bet A B C && out B A C).

#not_bet_out
assert forall (A B C : point). col A B C => ~bet A B C => out B A C.

#not_col_distincts
assert forall (A B C : point). ~col A B C => ~col A B C && A!=B && B!=C && A!=C.

#not_col_exists
assert forall (A B : point). A!=B => (exists (C : point). ~col A B C).

#not_conga_sym
assert forall (A B C D E F : point). ~congA A B C D E F => ~congA D E F A B C.

#not_lta_and_gta
assert forall (A B C D E F : point). ~(ltA A B C D E F && gtA A B C D E F).

#not_out_bet
assert forall (A B C : point). col A B C => ~out B A C => bet A B C.

#not_par_two_sides
assert forall (A B C D I : point). C!=D => col A B I => col C D I => ~col A B C => (exists (X Y : point). col C D X && col C D Y && ts A B X Y).

#not_two_sides_one_side
assert forall (A B X Y : point). A!=B => ~col X A B => ~ col Y A B => ~ts A B X Y => os A B X Y.
###########################"O"###########################################

#obtuse_gea_obtuse
assert forall (A B C D E F : point). obtuse D E F => geA A B C D E F => obtuse A B C.

#obtuse_per_lta
assert forall (A B C D E F : point). obtuse A B C => D!=E => E!=F => per D E F => ltA D E F A B C.

#one_or_two_sides
assert forall (A B X Y : point). ~col X A B => ~col Y A B => ts A B X Y || os A B X Y.

#one_side_not_col123
assert forall (A B X Y : point). os A B X Y => ~col A B X.

#one_side_not_col124
assert forall (A B X Y : point). os A B X Y => ~col A B Y.

#one_side_reflexivity
assert forall (P Q A : point). ~col A P Q => os P Q A A.

#one_side_transitivity
assert forall (P Q A B C : point). os P Q A B => os P Q B C => os P Q A C.

#os_ts_inangle
assert forall (A B C P : point). ts B P A C => os B A C P => inAngle P A B C.

#os2_inangle
assert forall (A B C P : point). os B A C P => os B C A P => inAngle P A B C.

#outer_pasch
assert forall (A B C P Q : point). bet A C P => bet B Q C => (exists (X : point). bet A X B && bet P Q X).

#out2_bet_out
assert forall (A B C X P : point). out B A C => out B X P => bet A X C => out B A P && out B C P.

#out2_bet
assert forall (A B C : point). out A B C => out C B A => bet A B C.

#out2_out_1
assert forall (B C D X : point). out B X C => out B X D => out B C D.

#out321_inangle
assert forall (A B C P : point). C!=B => out B A P => inAngle P A B C.

#out_acute
assert forall (A B C : point). out B A C => acute A B C.

#out_bet_out_2
assert orall (A B C P : point). out P A C => bet A B C=> out P B C.

#out_col
assert forall (A B C : point). out A B C => col A B C.

#out_conga
assert forall (A B C A1 B1 C1 A0 C0 A2 C2 : point). congA A B C A1 B1 C1 => out B A A0 => out B C C0 => out B1 A1 A2 => out B1 C1 C2 => congA A0 B C0 A2 B1 C2.

#out_conga_out
assert forall (A B C D E F : point). out B A C => congA A B C D E F => out E  D F.

#out_conga_reflect_out
assert forall (A B C P T T1 : point). ~out B A C => congA P B A P B C => out B A T => reflectL T T1 B P => out B C T1.

#out_cong_cong
assert forall (B A A0 E D D0 : point). out B A A0 => out E D D0 => cong B A E D => cong B A0 E D0 => cong A A0 D D0.

#out_in_angle
assert forall (A B C P : point). out B A C => out B P A => inAngle P A B C.

#out_in_angle_out
assert forall (A B C P : point). out B A C => inAngle P A B C => out B A P.

#out_lea_out
assert forall (A B C D E F : point). out E D F => leA A B C D E F => out B A C.

#out_one_side_1
assert forall (A B C D X : point). ~col A B C => col A B X => out X C D => os A B C D.

#out_one_side
assert forall (A B X Y : point). (~col A B X || ~col A B Y) => out A X Y => os A B X Y.

#out_out_one_side
assert forall (A B X Y Z : point). os A B X Y => out A Y Z => os A B X Z.

#out_to_bet
assert forall (A B C A1 B1 C1 : point). col A1 B1 C1 => (out B A C <=> out B1 A1 C1) => bet A B C => bet A1 B1 C1.

###############################"P"#########################

#per_col
assert forall (A B C D : point). B!=C => per A B C =>  col B C D => per A B D.

#per_not_col
assert forall (A B C : point). A!=B => B!=C => per A B C => ~col A B C.

#per_per_col
assert forall (A B C X : point). per A X C => X!=C => per B X C => col A B X.

#per2_cong2_cong_conga2
assert forall (A B C A1 B1 C1 : point). A!=B => B!=C => A1!=B1 => B1!=C1 => per A B C => per A1 B1 C1 => cong A C A1 C1 => cong B C B1 C1 => cong B A B1 A1 && congA B A C B1 A1 C1 && congA B C A B1 C1 A1.

#perp_col
assert forall (A B C D E : point). A!=E => perp A B C D => col A B E => perp A E C D.

#perp_col1
assert forall (A B C D X : point). C!=X => perp A B C D => col C D X => perp A B C X.

#per_col_eq
assert forall (A B C : point). per A B C => col A B C => B!=C => A=B.

#perp_distinct
assert forall (A B C D : point). perp A B C D => A!=B && C!=D.

#perp_in_perp_bis
assert forall (A B C D X : point). perp_at X A B C D => perp X B C D || perp A X C D.

#perp_not_col
assert forall (A B P : point). perp A B P A => ~col A B P.

#perp_not_eq_1
assert forall (A B C D : point). perp A B C D => A!=B.

############################"R"###############################

#reflectl_conga
assert forall (A B P P1 : point). A!=B => B!=P => reflectL P P1 A B => congA A B P A B P1.


############################"S"###########################

#segment_construction_0
assert forall (A B A1 : point). (exists (B1 : point). cong A1 B1 A B).

#segment_construction_3
assert forall (A B X Y : point). A!=B => X!=Y => (exists (C : point). out A B C && cong A C X Y).

#symmetric_point_construction
assert forall (P A : point). exists (P1 : point). midpoint A P P1.

#################################"T"##############################

#th18_18_aux
assert forall (A B C D E F : point). cong A B D E => cong A C D F => ltA F D E C A B => ~col A B C => ~col D E F => le D F D E => lt E F B C.

#th18_18
assert forall (A B C D E F : point). cong A B D E => cong A C D F => ltA F D E C A B => lt E F B C.

#triangle_inequality
assert forall (A B C D : point). bet A B D => cong B C B D => le A C A D.

#triangle_strict_inequality
assert forall (A B C D : point). bet A B D => cong B C B D => ~bet A B C => lt A C A D.

#triangle_strict_reverse_inequality
assert forall (A B C D : point). out AB D => cong A C A D => ~out A B C => lt B C B D.