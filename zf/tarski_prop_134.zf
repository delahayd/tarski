# $Id$

include "tarski_def.zf".

#14_18
assert forall (A B C C1 : point). A!=B => col A B C => cong A C A C1 => cong B C B C1 => C=C1.

#15_3
assert forall (A B C D : point). bet A B D => bet A C D => bet A B C || bet A C B.

#17_3
assert forall (M A : point). midpoint M A A => M=A.

#18_5
assert forall (A B : point). per A B B.

#18_7
assert forall (A B C : point). per A B C => per A C B => B=C.

#18_9
assert forall (A B C : point). per A B C => col A B C => (A=B || C=B).

#18_14_3
assert forall (A B C D X Y : point). perp_at X A B C D => perp_at Y A B C D => X=Y.

#18_18_uniqueness
assert forall (A B C X Y : point). ~col A B C => col A B X => perp A B C X => col A B Y => perp A B C Y => X=Y.

#19_8_2
assert forall (P Q A B C : point). ts P Q A C => os P Q A B => ts P Q B C.

#110_4
assert forall (A B P P1 : point). reflect P P1 A B => reflect P1 P A B.

#110_8
assert forall (A B P : point). reflect P P A B => col P A B.

#110_14
assert forall (P P1 A B : point). P!=P1 => A!=B => reflect P P1 A B => ts A B P P1.

#110_15
assert forall (A B C P : point). col A B C => ~col A B P => (exists (Q : point). perp A B Q C && os A B P Q).

#111_16
assert forall (A B C A1 B1 C1 : point). per A B C => A!=B => C!=B => per A1 B1 C1 => A1!=B1 => C1!=B1 => congA A B C A1 B1 C1.

#111_17
assert forall (A B C A1 B1 C1 : point). per A B C => congA A B C A1 B1 C1 => per A1 B1 C1.

#111_24
assert forall (P A B C : point). inAngle P A B C => inAngle P C B A.

#111_30
assert forall (A B C D E F A1 B1 C1 D1 E1 F1 : point). leA A B C D E F => congA A B C A1 B1 C1 => congA D E F D1 E1 F1 => leA A1 B1 C1 D1 E1 F1.

#111_36
assert forall (A B C D E F A1 D1 : point). A!=B => A1!=B => D!=E => D1!=E => bet A B A1 => bet D E D1 => (leA A B C D E F <=> leA D1 E F A1 B C).

#111_43
assert  forall (A B C : point). ~col A B C => (per B A C || obtuse B A C) => acute A B C && acute A C B.

#111_50_2
assert forall (A B C A1 B1 C1 : point). ~col A B C => congA B C A B1 C1 A1 => congA A B C A1 B1 C1 => cong A B A1 B1 => cong A C A1 C1 && cong B C B1 C1 && congA C A B C1 A1 B1.

#113_6
assert forall (lc ld l : point->point->prop) (a : point->point->point->prop). lcos lc l a => lcos ld l a => eqL lc ld.

#113_7
assert forall (l la lb lab lba : point->point->prop) (a b : point->point->point->prop). lcos la l a => lcos lb l b => lcos lab la b => lcos lba lb a => eqL lab lba.

############################"A"####################################

#acute_distincts
assert forall (A B C : point). acute A B C => A!=B && C!=B.

#acute_lea_acute
assert forall (A B C D E F : point). acute D E F => leA A B C D E F => acute A B C.

#acute_not_per
assert forall (A B C : point). acute A B C => ~per A B C.

#acute_sym
assert forall (A B C : point). acute A B C => acute C B A.

#all_eql
assert forall (A B : point) (l1 l2 : point->point->prop). len A B l1 => len A B l2 => eqL l1 l2.

#anga_col_null
assert forall (A B C : point) (a : point->point->point->prop). q_congA_acute a => a A B C => col A B C => out B A C && q_congA_null_acute a.

#anga_conga
assert forall (A B C A1 B1 C1 : point) (a : point->point->point->prop). q_congA_acute a => a A B C => a A1 B1 C1 => congA A B C A1 B1 C1.

#anga_conga_anga
assert forall (A B C A1 C1 : point) (a : point->point->point->prop). q_congA_acute a => a A B C => out B A A1 => out B C C1 => a A1 B C1.

#anga_is_ang
assert forall (a : point->point->point->prop). q_congA_acute a => q_congA a.

#anga_out-anga
assert forall (A B C A1 C1 : point) (a : point->point->point->prop). q_congA_acute a => a A B C => out B A A1 => out B C C1 => a A1 B C1.

#anga_sym
assert forall (A B C : point) (a : point->point->point->prop). q_congA_acute a => a A B C => a C B A.

#########################"B"#####################################@

#bet_conga_bet
assert forall (A B C A1 B1 C1 : point). bet A B C => congA A B C A1 B1 C1 => bet A1 B1 C1.

############################"C"####################################

#col_in_angle
assert forall (A B C P : point). A!=B => C!=B => P!=B => out B A P || out B C P => inAngle P A B C.

#conga_distinct
assert forall (A B C D E F : point). congA A B C D E F => congA A B C D E F && A!=B && C!=B && D!=E && F!=E.

#conga_line
assert forall (A B C A1 B1 C1 : point). A!=B => B!=C => A1 !=B1 => B1!=C1 => bet A B C => bet A1 B1 C1 => congA A B C A1 B1 C1.

#conga_preserves_lta
assert forall (A B C D E F A1 B1 C1 D1 E1 F1 : point). congA A B C A1 B1 C1 => congA D E F D1 E1 F1 => ltA A B C D E F => ltA A1 B1 C1 D1 E1 F1.

#conga_preserves_gta
assert forall (A B C D E F A1 B1 C1 D1 E1 F1 : point). congA A B C A1 B1 C1 => congA D E F D1 E1 F1 =>  gtA A B C D E F => gtA A1 B1 C1 D1 E1 F1.

#conga_refl
assert forall (A B C : point). A!=B => C!=B => congA A B C A B C.

###############################"E"#####################

#eqA_preserves_ang
assert forall (a b : point->point->point->prop). q_congA a => eqA a b => q_congA b.

#eqA_preserves_anga
assert forall (a b : point->point->point->prop). q_congA_acute a => q_congA b => eqA a b => q_congA_acute b.

#eq_conga_out
assert forall (A B D E F : point). congA A B A D E F => out E D F.

#ex_eqL
assert forall (l1 l2 : point->point->prop). q_cong l1 => q_cong l2 => (exists (A B : point). l1 A B && l2 A B) => eqL l1 l2.

#ex_eql
assert forall (l1 l2 : point->point->prop). (exists (A B : point). len A B l1 && len A B l2) => eqL l1 l2.

################################"I"################################

#in_angle_one_side
assert forall (A B C P : point). ~col A B C => ~col B A P => inAngle P A B C => os A B P C.

#in_angle_trivial_2
assert forall (A B C : point). A!=B => C!=B => inAngle C A B C.

#is_anga_conga
assert forall (A B C A1 B1 C1 : point) (a : point->point->point->prop). ang_acute A B C a => ang_acute A1 B1 C1 a => congA A B C A1 B1 C1.

#is_len_cong
assert forall (A B C D : point) (l : point->point->prop). len A B l => len C D l => cong A B C D.

#is_len_cong_is_len
assert forall (A B C D : point) (l : point->point->prop). len A B l => cong A B C D => len C D l.

###############################"L"###############################

#lcos_exists
assert forall (l : point->point->prop) (a : point->point->point->prop). q_congA_acute a => q_cong l => ~q_cong_null l => (exists (lp : point->point->prop). lcos lp l a).

#lcos_lg
assert forall (A B C : point) (lp l : point->point->prop) (a : point->point->point->prop). lcos lp l a => perp A B B C => a A B C => l A C => lp A B.

#lcos_lg_not_null
assert forall (lp l : point->point->prop) (a : point->point->point->prop). lcos l lp a => ~q_cong_null l && ~q_cong_null lp.

#lcos_lg_anga
assert forall (lp l : point->point->prop) (a : point->point->point->prop).lcos lp l a => lcos lp l a && q_cong l && q_cong lp && q_congA_acute a.

#lcos_per
assert forall (A B C : point) (lp l : point->point->prop) (a : point->point->point->prop). q_congA_acute a =>q_cong l => q_cong lp => lcos lp l a => l A C => lp A B => a A B C => per A B C.

#lcos2_comm
assert forall (lp l : point->point->prop) (a b : point->point->point->prop). lcos2 lp l a b => lcos2 lp l a b.

#lcos2_eql_lcos2
assert orall (lla llb la lb : point->point->prop) (a b : point->point->point->prop). lcos2 lla llb a b => eqL lla llb => eqL la lb => lcos2 lb llb a b.

#lcos2_lg_anga
assert forall (lp l : point->point->prop) (a b : point->point->point->prop). lcos2 lp l a b => lcos2 lp l a b && q_cong lp && q_cong l && q_congA_acute a && q_congA_acute b.

#lcos2_lg_not_null
assert forall (lp l : point->point->prop) (a b : point->point->point->prop). lcos2 lp l a b => ~q_cong_null l && ~q_cong_null lp.

#lcos2_uniqueness
assert forall (l l1 l2 : point->point->prop) (a b : point->point->point->prop). lcos2 l1 l a b => lcos2 l2 l a b => eqL l1 l2.

#lcos3_eql_lcos3
assert forall (lla llb la lb : point->point->prop) (a b c : point->point->point->prop). lcos3 la lla a b c => eqL lla llb => eqL la lb => lcos3 lb llb a b c.

#lcos3_lcos_1_2
assert forall (lp l : point->point->prop) (a b c : point->point->point->prop). lcos3 lp l a b c <=> (exists (la : point->point->prop). lcos la l a && lcos2 lp la b c).

#lcos3_lcos_2_1
assert forall (lp l : point->point->prop) (a b c : point->point->point->prop). lcos3 lp l a b c <=> (exists (lab : point->point->prop). lcos2 lab l a b && lcos lp lab c).

#lcos3_lg_anga
assert forall (lp l : point->point->prop) (a b c : point->point->point->prop). lcos3 lp l a b c => lcos3 lp l a b c && q_cong lp && q_cong l && q_congA_acute a && q_congA_acute b && q_congA_acute c.

#lcos3_permut1
assert forall (lp l : point->point->prop) (a b c : point->point->point->prop). lcos3 lp l a b c => lcos3 lp l a c b.

#lcos3_permut3
assert forall (lp l : point->point->prop) (a b c : point->point->point->prop). lcos2 lp l a b c => lcos3 lp l b a c.

#lcos3_uniqueness
assert forall (l l1 l2 : point->point->prop) (a b c : point->point->point->prop). lcos3 l1 l a b c => lcos3 l2 l a b c => eqL l1 l2.

#lg_cong
assert forall (A B C D : point) (l : point->point->prop). q_cong l => l A B => l C D => cong A B C D.

#lg_cong_lg
assert  forall (A B C D : point) (l : point->point->prop). q_cong l => l A B => cong A B C D => l C D.

#lg_sym
assert forall (A B : point) (l : point->point->prop). q_cong l => l A B => l B A.

#lta_diff
assert forall (A B C D E F : point). ltA A B C D E F => ltA A B C D E F && A!=B && C!=B && D!=E && F!=E.

###############################"O"################################

#obtuse_not_acute
assert forall (A B C : point). obtuse A B C => ~acute A B C.

#one_side_transitivity
assert forall (P Q A B C : point). os P Q A B => os P Q B C => os P Q A C.

#osym_not_col
assert forall (A B P P1 : point). reflect P P1 A B => ~col A B P => ~col A B P1.

#out2_out_2
assert forall (B C D X : point). out B C X => out B D X => out B C D.

#out_acute
assert forall (A B C : point). out B A C => acute A B C.

#out_conga
assert forall (A B C A1 B1 C1 A0 C0 A2 C2 : point). congA A B C A1 B1 C1 => out B A A0 => out B C C0 => out B1 A1 A2 => out B1 C1 C2 => congA A0 B C0 A2 B1 C2.

#out_conga_out
assert forall (A B C D E F : point). out B A C => congA A B C D E F => out E D F.

#out_out_one_side
assert forall (A B X Y Z : point). os A B X Y => out A Y Z => os A B X Z.

##############################"P"###############################

#per_col
assert forall (A B C D : point). B!=C => per A B C =>  col B C D => per A B D.

#per_not_col
assert forall (A B C : point). A!=B => B!=C => per A B C => ~col A B C.

#perp_acute_out
assert forall (A B C C1 : point). acute A B C => perp A B C C1 => col A B C1 => out B A C1.

#perp_col
assert forall (A B C D E : point). A!=E => perp A B C D => col A B E => perp A E C D.

#perp_distinct
assert forall (A B C D : point). perp A B C D => A!=B && C!=D.

#perp_in_col_perp_in
assert forall (A B C D E P : point). C!=E => col C D E => perp_at P A B C D => perp_at P A B C E.

#perp_in_perp_bis
assert forall (A B C D X : point). perp_at X A B C D => perp X B C D || perp A X C D.

#perp_not_col
assert forall (A B P : point). perp A B P A => ~col A B P.

#perp_not_eq_1
assert forall (A B C D : point). perp A B C D => A!=B.

#perp_not_eq2
assert forall (A B C D : point). perp A B C D => C!=D.

#perp_out_acute
assert forall (A B C C1 : point). out B A C1 => perp A B C C1 => acute A B C.
