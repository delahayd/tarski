# $Id$

include "tarski_def.zf".
include "tarski_col.zf".
include "tarski_col_bis.zf".
include "tarski_side.zf".
include "tarski_perp.zf".
include "tarski_out.zf".

#18_7
assert forall (A B C : point). per A B C => per A C B => B=C.

#19_8_2
assert forall (P Q A B C : point). ts P Q A C => os P Q A B => ts P Q B C.

#110_4
assert forall (A B P P1 : point). reflect P P1 A B => reflect P1 P A B.

#110_8
assert forall (A B P : point). reflect P P A B => col P A B.

#110_14
assert forall (P P1 A B : point). P!=P1 => A!=B => reflect P P1 A B => ts A B P P1.

#anga_conga
assert forall (A B C A1 B1 C1 : point) (a : point->point->point->prop). q_congA_acute a => a A B C => a A1 B1 C1 => congA A B C A1 B1 C1.

#anga_conga_anga
assert forall (A B C A1 C1 : point) (a : point->point->point->prop). q_congA_acute a => a A B C => out B A A1 => out B C C1 => a A1 B C1.

#anga_sym
assert forall (A B C : point) (a : point->point->point->prop). q_congA_acute a => a A B C => a C B A.

#ex_eql
assert forall (l1 l2 : point->point->prop). (exists (A B : point). len A B l1 && len A B l2) => eqL l1 l2.

#lcos_lg
assert forall (A B C : point) (lp l : point->point->prop) (a : point->point->point->prop). lcos lp l a => perp A B B C => a A B C => l A C => lp A B.

#lcos_lg_anga
assert forall (lp l : point->point->prop) (a : point->point->point->prop).lcos lp l a => lcos lp l a && q_cong l && q_cong lp && q_congA_acute a.

#lcos_per
assert forall (A B C : point) (lp l : point->point->prop) (a : point->point->point->prop). q_congA_acute a =>q_cong l => q_cong lp => lcos lp l a => l A C => lp A B => a A B C => per A B C.

#lg_sym
assert forall (A B : point) (l : point->point->prop). q_cong l => l A B => l B A.

#osym_not_col
assert forall (A B P P1 : point). reflect P P1 A B => ~col A B P => ~col A B P1.

#out_conga_out
assert forall (A B C D E F : point). out B A C => congA A B C D E F => out E D F.

#per_col
assert forall (A B C D : point). B!=C => per A B C =>  col B C D => per A B D.

#perp_col
assert forall (A B C D E : point). A!=E => perp A B C D => col A B E => perp A E C D.

#perp_not_eq2
assert forall (A B C D : point). perp A B C D => C!=D.

goal forall (l la lb lab lba : point->point->prop) (a b : point->point->point->prop). lcos la l a => lcos lb l b => lcos lab la b => lcos lba lb a => eqL lab lba.
