# $Id$

include "tarski_def.zf".
include"tarski_col.zf".
include"tarski_col_bis.zf".
include "tarski_bet.zf".
include "tarski_perp.zf".

#15_1
assert forall (A B C D : point). A!=B => bet A B C => bet A B D => bet A C D || bet A D C.

#15_2
assert forall (A B C D : point). A!=B => bet A B C => bet A B D => bet B C D || bet B D C.

#15_3
assert forall (A B C D : point). bet A B D => bet A C D => bet A B C || bet A C B.

#17_2
assert forall (M A B : point). midpoint M A B => midpoint M B A.

#17_3
assert forall (M A : point). midpoint M A A => M=A.

#17_3_2
assert forall (A : point). midpoint A A A.

#17_17
assert forall (P P1 A B : point). midpoint A P P1 => midpoint B P P1 => A=B.

#18_2
assert forall (A B C : point). per A B C => per C B A.

#18_6
assert forall (A B C A1 : point). per A B C => per A1 B C => bet A C A1 => B=C.

#18_24
assert forall (A B P Q R T : point). perp P A A B => perp Q B A B => col A B T => bet P T Q => bet B R Q => cong A P B R => (exists (X : point). midpoint X A B && midpoint X P R).

#between_exchange4
assert forall (A B C D : point). bet A B C => bet A C D => bet A B D.

#col13
assert forall (A B C D A1 B1 C1 D1 : point). ifsc A B C D A1 B1 C1 D1 => cong B D B1 D1.

#is_midpoint_id
assert forall (A B : point). midpoint A A B => A=B.

#outer_transitivity_between
assert forall (A B C D : point). bet A B C=> bet B C D => B!=C => bet A B D.

#outer_transitivity_between2
assert forall (A B C D : point). bet A B C => bet B C D => B!=C => bet A C D.

#perp_col2
assert forall (A B C D X Y : point). perp A B X Y => C!=D => col A B C => col A B D => perp C D X Y.

#perp_distinct
assert forall (A B C D : point). perp A B C D => A!=B && C!=D.

#sym_preserve_diff
assert forall (A B M A1 B1 : point). A!=B => midpoint M A A1 => midpoint M B B1 => A1!=B1.

#symmetric_point_uniqueness
assert forall (A P P1 P2 : point). midpoint P A P1 => midpoint P A P2 => P1=P2.

goal forall (P Q A C R S M : point). le S C R A => ts P Q A C => col R P Q => perp P Q A R => col S P Q => perp P Q C S => midpoint M R S => (forall (U C1 : point). midpoint M U C1 => (out R U A <=> out S C C1)).
