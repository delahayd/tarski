# $Id$

include "tarski.zf".

val col : point -> point -> point -> prop.
val ofsc : point -> point -> point -> point -> point -> point -> point -> point -> prop.
val cong_3 : point -> point -> point -> point -> point -> point -> prop.
val bet_4 : point->point->point->point->prop.
val betS : point->point->point->prop.
val ifsc : point -> point -> point -> point -> point -> point -> point -> point -> prop.
val fsc : point -> point -> point -> point -> point -> point -> point -> point -> prop.
val le : point->point->point->point->prop.
val lt : point->point->point->point->prop.
val ge : point->point->point->point->prop.
val gt : point->point->point->point->prop.
val out : point->point->point->prop.
val midpoint : point->point->point->prop.
val per : point->point->point->prop.
val perp_at : point->point->point->point->point->prop.
val perp : point->point->point->point->prop.
val ts : point->point->point->point->prop.
val reflectP : point->point->point->prop.
val os : point->point->point->point->prop.
val inAngle : point->point->point->point->prop.
val coplanar : point->point->point->point->prop.
val reflectL_at : point->point->point->point->point->prop.
val reflectL : point->point->point->point->prop.
val reflect : point->point->point->point->prop.
val congA : point->point->point->point->point->point->prop.
val leA : point->point->point->point->point->point->prop.
val ltA : point->point->point->point->point->point->prop.
val gtA : point->point->point->point->point->point->prop.
val acute : point->point->point->prop.
val obtuse : point->point->point->prop.
val geA : point->point->point->point->point->point->prop.
val par : point->point->point->point->prop.
val par_strict : point->point->point->point->prop.
val inter : point->point->point->point->point->prop.
val tarski_s_parallel_postulate : prop.
val decidability_of_intersection : prop.
val sumA : point->point->point->point->point->point->point->point->point->prop.
val triSumA : point->point->point->point->point->point->prop.
val sams : point->point->point->point->point->point->prop.
val saccheri : point->point->point->point->prop.
val hypothesis_of_obtuse_saccheri_quadrilaterals : prop.


#################################'A'########################################

#acute
rewrite
	forall (A B C : point). acute A B C <=> (exists (A1 B1 C1 : point). per A1 B1 C1 && ltA A B C A1 B1 C1).


#################################'B'########################################

#bet_4
rewrite
	forall (A1 A2 A3 A4 : point). bet_4 A1 A2 A3 A4 <=> bet A1 A2 A3 && bet A2 A3 A4 && bet A1 A3 A4 && bet A1 A2 A4.

#betS
rewrite
	forall (A B C : point). betS A B C <=> bet A B C && A!=B && B!=C.

#################################'C'########################################

#col 
rewrite
	forall (A B C : point). col A B C <=> bet A B C || bet B C A || bet C A B.
  
#cong_3
rewrite
	forall (A B C A1 B1 C1 : point). cong_3 A B C A1 B1 C1 <=> cong A B A1 B1 && cong A C A1 C1 && cong B C B1 C1.


#congA
rewrite
	forall (A B C D E F : point). congA A B C D E F <=> (A!=B && C!=B && D!=E && F!=E && (exists (A1 C1 D1 F1 : point). bet B A A1 && cong A A1 E D && bet B C C1 && cong C C1 E F && bet E D D1 && cong D D1 B A && bet E F F1 && cong F F1 B C && cong A1 C1 D1 F1)).
	
#coplanar
rewrite
	forall (A B C D : point). coplanar A B C D <=> (exists (X : point). (col A B X && col C D X) || (col A C X && col B D X) || (col A D X && col B C X)).


#################################'F'########################################

#fsc
rewrite
	forall (A B C D A1 B1 C1 D1 : point). fsc A B C D A1 B1 C1 D1 <=> col A B C && cong_3 A B C A1 B1 C1 && cong A D A1 D1 && cong B D B1 D1.

#################################'G'########################################

#ge
rewrite
	forall (A B C D : point). ge A B C D <=> le C D A B.

#gt
rewrite
	forall (A B C D : point). gt A B C D <=> lt C D A B.

#geA
rewrite
	forall (A B C D E F : point). geA A B C D E F <=> leA D E F A B C.

#gtA
rewrite
	forall (A B C D E F : point). gtA A B C D E F <=> ltA D E F A B C. 

#################################'I'########################################

#ifsc
rewrite
	forall (A B C D A1 B1 C1 D1 : point). ifsc A B C D A1 B1 C1 D1 <=> bet A B C && bet A1 B1 C1 && cong A C A1 C1 && cong B C B1 C1 && cong A D A1 D1 && cong C D C1 D1.

#inAngle
rewrite
	forall (P A B C : point). inAngle P A B C <=> (A!=B && C!=B && P!=B && (exists (X : point). bet A X C && (X=B || out B X P))).

#inter
rewrite
	forall (A1 A2 B1 B2 X : point). inter A1 A2 B1 B2 X <=> (exists (P : point). col P B1 B2 && ~col P A1 A2) && col A1 A2 X && col B1 B2 X.



#################################'L'########################################


#le
rewrite
	forall (A B C D : point). le A B C D <=> (exists (E : point). bet C E D && cong A B C E).

#lt
rewrite
	forall (A B C D : point). lt A B C D <=> le A B C D && ~cong A B C D.

#leA
rewrite
	forall (A B C D E F : point). leA A B C D E F <=> (exists (P : point). inAngle P D E F && congA A B C D E P).

#ltA
rewrite
	forall (A B C D E F : point). ltA A B C D E F <=> (leA A B C D E F && ~congA A B C D E F).


#################################'M'########################################

#midpoint
rewrite
	forall (M A B : point). midpoint M A B <=> bet A M B && cong A M M B.


#################################'O'########################################

#obtuse
rewrite
	forall (A B C : point). obtuse A B C <=> (exists (A1 B1 C1 : point). per A1 B1 C1 && gtA A B C A1 B1 C1).

#ofsc
rewrite
	forall (A B C D A1 B1 C1 D1 : point). ofsc A B C D A1 B1 C1 D1 <=> bet A B C && bet A1 B1 C1 && cong A B A1 B1 && cong B C B1 C1 && cong A D A1 D1 && cong B D B1 D1.

#os
rewrite
	forall (A B P Q : point). os A B P Q <=> (exists (R : point). ts A B P R && ts A B Q R).

#out
rewrite
	forall (P A B : point). out P A B <=> A!=P && B!=P && (bet P A B || bet P B A).

#################################'P'########################################

#par_strict
rewrite
	forall (A B C D : point). par_strict A B C D <=> A!=B && C!=D && coplanar A B C D && ~(exists (X : point). col X A B && col X C D).

#par
rewrite
	forall (A B C D : point). par A B C D <=> par_strict A B C D || (A!=B && C !=D && col A C D && col B C D).

#per
rewrite
	forall (A B C : point). per A B C <=> (exists (C1 : point). midpoint B C C1 && cong A C A C1).

#perp_at
rewrite
	forall (X A B C D : point). perp_at X A B C D <=> ((forall (U V : point). col U A B => col V C D => per U X V) && A!=B && C!=D && col X A B && col X C D).

#perp
rewrite
	forall (A B C D : point). perp A B C D <=> (exists (X : point). perp_at X A B C D). 



#################################'R'########################################

#reflectP
rewrite
	forall (A A1 C : point). reflectP A A1 C <=> midpoint C A1 A.

#reflect_at
rewrite
	forall (M P1 P A B : point). reflectL_at M P1 P A B <=> (midpoint M P P1 && col A B M) && (perp A B P P1 || P=P1).

#reflectL
rewrite
	forall (P1 P A B : point). reflectL P1 P A B <=> (exists (X : point). midpoint X P P1 && col A B X) && (perp A B P P1 || P=P1).

#reflect
rewrite
	forall (P1 P A B : point). reflect P1 P A B <=> (A!=B && reflectL P1 P1 A B) || (A=B && midpoint A P P1).

#################################'S'########################################

#sumA
rewrite
	forall (A B C D E F G H I : point). sumA A B C D E F G H I <=> (exists (J : point). congA C B J D E F && ~os B C A J && congA A B J G H I).


#saccheri
rewrite
	forall (A B C D : point). saccheri A B C D <=> per B A D && per A D C && cong A B C D && os A D B C.

#sams
rewrite
	forall (A B C D E F : point). sams A B C D E F <=> A!=B && (out E D F || ~bet A B C) && (exists (J : point). congA C B J D E F && ~os B C A J && ~ts A B C J).


#################################'T'########################################

#triSumA
rewrite
	forall (A B C D E F : point). triSumA A B C D E F <=> (exists (G H I : point). sumA A B C B C A G H I && sumA G H I C A B D E F).

#ts
rewrite
	forall (A B P Q : point). ts A B P Q <=> ~col P A B && ~col Q A B && (exists (T : point). col T A B && bet P T Q).




rewrite
	tarski_s_parallel_postulate <=> (forall (A B C D T : point). bet A D T => bet B C D => A!=D => (exists (X Y : point). bet A B X && bet A C Y && bet X T Y)).

rewrite
	decidability_of_intersection <=> (forall (A B C D : point). (exists (I : point). col I A B && col I C D) || ~(exists (I : point). col I A B && col I C D)).

rewrite
	hypothesis_of_obtuse_saccheri_quadrilaterals <=> (forall (A B C D : point). saccheri A B C D => obtuse A B C).
