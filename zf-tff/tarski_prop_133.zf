# $Id$

include "tarski_def.zf".

#16_11_uniqueness
assert forall (A B C R X Y : point). R!=A => B!=C => out A X R => cong A X B C => out A Y R => cong A Y B C => X=Y.

#111_21_b
assert forall (A B C A1 B1 C1 : point). out B A C => out B1 A1 C1 => congA A B C A1 B1 C1.


############################"A"####################################

#acute_col_out
assert forall (A B C : point). acute A B C => col A B C => out B A C.

#acute_distincts
assert forall (A B C : point). acute A B C => A!=B && C!=B.

#acute_lea_acute
assert forall (A B C D E F : point). acute D E F => leA A B C D E F => acute A B C.

#acute_not_bet
assert forall (A B C : point). acute A B C => ~bet A B C.

#all_eqa
assert forall (A B C : point) (a1 a2 : point->point->point->prop). ang A B C a1 => ang A B C a2 => eqA a1 a2.

#all_eqaa
assert forall (A B C : point) (a1 a2 : point->point->point->prop). ang_acute A B C a1 => ang_acute A B C a2 => eqA a1 a2.

#anga_acute
assert forall (A B C : point) (a : point->point->point->prop). q_congA_acute a => a A B C => acute A B C.

#anga_conga
assert forall (A B C A1 B1 C1 : point) (a : point->point->point->prop). q_congA_acute a => a A B C => a A1 B1 C1 => congA A B C A1 B1 C1.

#anga_conga_anga
assert forall (A B C A1 C1 : point) (a : point->point->point->prop). q_congA_acute a => a A B C => out B A A1 => out B C C1 => a A1 B C1.

#anga_distinct
assert forall (A B C : point) (a : point->point->point->prop). q_congA_acute a => a A B C => A!=B && C!=B.

#anga_is_ang
assert forall (a : point->point->point->prop). q_congA_acute a => q_congA a.

#anga_not_flat
assert forall (a : point->point->point->prop). q_congA_acute a => q_congA_nFlat a.

#ang_conga
assert forall (A B C A1 B1 C1 : point) (a : point->point->point->prop). q_congA a => a A1 B1 C1 => a A B C => congA A B C A1 B1 C1.

#ang_const
assert forall (A B  : point) (a : point->point->point->prop). q_congA a => A!=B => (exists (C : point). a A B C). 


#########################"B"#####################################@

#bet_conga_bet
assert forall (A B C A1 B1 C1 : point). bet A B C => congA A B C A1 B1 C1 => bet A1 B1 C1.


############################"C"####################################

#conga_distinct
assert forall (A B C D E F : point). congA A B C D E F => congA A B C D E F && A!=B && C!=B && D!=E && F!=E.

#conga_line
assert forall (A B C A1 B1 C1 : point). A!=B => B!=C => A1 !=B1 => B1!=C1 => bet A B C => bet A1 B1 C1 => congA A B C A1 B1 C1.

#conga_refl
assert forall (A B C : point). A!=B => C!=B => congA A B C A B C.


#conga_sym
assert forall (A B C A1 B1 C1 : point). congA A B C A1 B1 C1 => congA A1 B1 C1 A B C.

#conga_trans
assert forall (A B C A1 B1 C1 A2 B2 C2 : point). cong A B C A1 B1 C1 => congA A1 B1 C1 A2 B2 C2 => congA A B C A2 B2 C2.

##############################"E"##################################

#eqA_preserves_ang
assert forall (a b : point->point->point->prop). q_congA a => eqA a b => q_congA b.

#ex_eqa
assert forall (a1 a2 : point->point->point->prop). (exists (A B C : point). ang A B C a1 && ang A B C a2) => eqA a1 a2.

#ex_eqaa
assert forall (a1 a2 : point->point->point->prop). (exists (A B C : point). ang_acute A B C a1 && ang_acute A B C a2) => eqA a1 a2.

############################"I"#####################################

                                       #########"is_anga"#################

#is_anga_conga_is_anga
assert forall (A B C A1 B1 C1 : point) (a : point->point->point->prop). ang_acute A B C a => congA A B C A1 B1 C1 => ang_acute A1 B1 C1 a.

#is_anga_distinct
assert forall (A B C : point) (a : point->point->point->prop). ang_acute A B C a => A!=B && C!=B.

#is_anga_to_is_ang
assert forall (A B C : point) (a : point->point->point->prop). ang_acute A B C a => ang A B C a.

                                      ##########"is_ang"#################

#is_ang_conga
assert forall (A B C A1 B1 C1 : point) (a : point->point->point->prop). ang A B C a => ang A1 B1 C1 a => congA A B C A1 B1 C1.

#is_ang_conga_is_ang
assert forall (A B C A1 B1 C1 : point) (a : point->point->point->prop). ang A B C a => congA A B C A1 B1 C1 => ang A1 B1 C1 a.

#is_ang_distinct
assert forall (A B C : point) (a : point->point->point->prop). ang A B C a => A!=B && C!=B.


#in_angle_trivial_2
assert forall (A B C : point). A!=B => C!=B => inAngle C A B C.

#is_len_cong
assert forall (A B C D : point) (l : point->point->prop). len A B l => len C D l => cong A B C D.

##############################"O"################################

#out_conga
assert forall (A B C A1 B1 C1 A0 C0 A2 C2 : point). congA A B C A1 B1 C1 => out B A A0 => out B C C0 => out B1 A1 A2 => out B1 C1 C2 => congA A0 B C0 A2 B1 C2.

#out_conga_out
assert forall (A B C D E F : point). out B A C => congA A B C D E F => out E D F.

#out_is_len_eq
assert forall (A B C : point) (l : point->point->prop).  out A B C => len A B l => len A C l => B=C.

#out_null_anga
assert forall (A B C : point) (a : point->point->point->prop). q_congA_acute a => a A B C => out B A C => q_congA_null_acute a.
