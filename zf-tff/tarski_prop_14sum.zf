# $Id$

include "tarski_def.zf".

#16_21
assert forall (A B C D P Q : point). ~col A B C => C!=D => col A B P => col A B Q => col C D P => col C D Q => P=Q.

#17_20
assert forall (M A B : point). col A M B => cong M A M B => A=B || midpoint M A B.

###################################"A"########################

#all_coplanar
assert forall (A B C D : point). coplanar A B C D.


##########################"C"#############################

#change_grid_sum_0
assert forall (O E E1 A B C O1 A1 B1 C1 : point). par_strict O E O1 E1 => ar1 O E A B C => ar1 O1 E1 A1 B1 C1 => pj O O1 A A1 => pj O O1 B B1 => pj O O1 C C1 => pj O O1 E E1 =>sum O E E1 A B C => A=O => sum O1 E1 E A1 B1 C1.

#col13
assert forall (X Y A B C : point). X!=Y => col X Y A => col X Y B => col X Y C => col A B C.

#cong_sum
assert forall (A B C : point). O!=C || B!=A => ar2 O E E1 A B C => cong O A B C => cong O B A C => sum O E E1 A B C.

############################"D"############################

#diff_ar2
assert forall (O E E1 A B AMB : point). diff O E E1 A B AMB => ar2 O E E1 A B AMB.

#diff_null
assert forall (O E E1 A : point). ~col O E E1 => col O E A => diff O E E1 A A O.

#diff_O_A_opp
assert forall (O E E1 A mA : point). diff O E E1 O A mA => opp O E E1 A mA.

#diff_sum
assert forall (O E E1 A B S : point). diff O E E1 S A B => sum O E E1 A B S.

#diff_uniqueness
assert forall (O E E1 A B D1 D2 : point). diff O E E1 A B D1 => diff O E E1 A B D2 => D1=D2.

#diff_uniquenessB
assert forall (O E E1 A B B1 C : point). diff O E E1 A B C => diff O E E1 A B1 C => B=B1.

#double_null_null
assert forall (O E E1 A : point). sum O E E1 A A O => A=O.


###############################"O"#######################
#opp0
assert opp O E E1 O O.

#opp_comm
assert forall (X Y : point). opp O E E1 X Y => opp O E E1 Y X.

#opp_midpoint
assert forall (O E E1 A MA : point). opp O E E1 A MA => midpoint O A MA.

#opp_uniqueness
assert forall (A MA1 MA2 : point). opp O E E1 A MA1 => opp O E E1 A MA2 => MA1=MA2.

###############################"P"#############################

#par_col_par
assert forall (A B C D D1 : point). C!=D1 => par A B C D => col C D D1 => par A B C D1.

#par_col_par_2
assert forall (A B C D P : point). A!=P => col A B P => par A B C D => par A P C D.

#par_distincts
assert forall (A B C D : point). par A B C D => (par A B C D && A!=B && C!=D).

#par_trans
assert forall (A1 A2 B1 B2 C1 C2 : point). par A1 A2 B1 B2 => par B1 B2 C1 C2 => par A1 A2 C1 C2.

#par_strict_col_par_strict
assert forall (A B C D E : point). C!=E => par_strict A B C D => col C D E => par_strict A B C E.

#pj_comm
assert forall (A B C D : point). pj A B C D => pj B A D C.

#pj_left_comm
assert forall (A B C D : point). pj A B C D => pj B A C D.

#pj_right_comm
assert forall (A B C D : point). pj A B C D => pj A B D C.

#pj_trivial
assert forall (A B C : point). pj A B C C.

#pj_uniqueness
assert forall (O E E1 A A1 A2 : point). ~col O E E1 => col O E A => col O E1 A1 => col O E1 A2 => pj E E1 A A1 => pj E E1 A A2 => A1=A2.

#project_col_project
assert forall (A B C P P1 X Y : point). A!=C => col A B C => proj P P1 A B X Y => proj P P1 A C X Y.

#project_trivial
assert forall (P A B X Y : point). A!=B => X!=Y => col A B P => ~par A B X Y => proj P P A B X Y.

###############################"S"#############################

#sum_A_B_A
assert forall (A B : point). sum O E E1 A B A => B=O.

#sum_A_B_B
assertforall (A B : point). sum O E E1 A B B => A=O.

#sum_B_null
assert forall (A B : point). sum O E E1 A B A => B=O.

#sum_A_O_eq
assert forall (A C : point). sum O E E1 A O C => A=C.

#sum_A_O
assert forall (A : point). col O E A => sum O E E1 A O A.

#sum_O_B_eq
assert forall (B C : point). sum O E E1 O B C => B=C.

#sum_O_B
assert forall (B : point). col O E B => sum O E E1 O B B.

#sum_O_O
assert sum O E E1 O O O.

#sum_ar2
assert forall (O E E1 A B C : point). sum O E E1 A B C => ar2 O E E1 A B C.

#sum_assoc_1
assert forall (O E E1 A B C AB BC ABC : point). sum O E E1 A B AB => sum O E E1 B C BC => sum O E E1 A BC ABC => sum O E E1 AB C ABC.

#sum_assoc_2
assert forall (O E E1 A B C AB BC ABC : point). sum O E E1 A B AB => sum O E E1 B C BC => sum O E E1 AB C ABC => sum O E E1 A BC ABC.

#sum_comm
assert forall (A B C : point). sum O E E1 A B C => sum O E E1 B A C.

#sum_cong
assert forall (A B C : point). sum O E E1 A B C => (A!=O || B!=O) => parallelogram_flat O A B C.

#sum_cong2
assert forall (A B C : point). sum O E E1 A B C => (A!=O || B!=O) => (cong O A B C && cong O B A C).

#sum_diff
assert forall (O E E1 A B S : point). sum O E E1 A B S => diff O E E1 S A B.

#sum_par_strict
assert orall (A B C A1 C1 : point). ar2 O E E1 A B C => A!=O => pj E E1 A A1 => col O E1 A1 => pj O E A1 C1 => pj O E1 B C1 => pj E1 E C1 C => A1!=O && (par_strict O E A1 C1 || B=O).

#sum_plg
assert forall (A B C : point). sum O E E1 A B C => (A!=O) || (B!=O) => (exists (A1 C1 : point). plg O B C1 A1 && plg C1 A1 A C).

#sum_to_sump
assert forall (O E E1 A B C : point). sum O E E1 A B C => sump O E E1 A B C.

#sump_to_sum
assert forall (O E E1 A B C : point). sump O E E1 A B C => sum O E E1 A B C.

#sum_uniqueness
assert forall (A B C1 C2 : point). sum O E E1 A B C1 => sum O E E1 A B C2 => C1=C2.

#sum_uniquenessA
assert forall (B X Y C : point). sum O E E1 X B C => sum O E E1 Y B C => X=Y.

#sum_uniquenessB
assert forall (A X Y C : point). sum O E E1 A X C => sum O E E1 A Y C => X=Y.

#sum22_col
assert forall (O E E1 A B C D S : point). sum22 O E E1 A B C D S => ~col O E E1 && col O E A && col O E B && col O E C && col O E D && col O E S.

#sum22_comm
 assert forall (O E E1 A B C D S : point). sum22 O E E1 A B C D S => sum22 O E E1 B A C D S.
 
#sum22_permut
assert forall (O E E1 A B C D S : point). sum22 O E E1 A B C D S => sum22 O E E1 D A B C S.

#sum3_col
assert forall (O E E1 A B C S : point). sum3 O E E1 A B C S => ~col O E E1 && col O E A && col O E B && col O E C && col O E S.

sum3_comm_1_2
assert  forall (O E E1 A B C S : point). sum3 O E E1 A B C S => sum3 O E E1 B A C S.

#sum3_permut
assert forall (O E E1 A B C S : point). sum3 O E E1 A B C S => sum3 O E E1 C A B S.

#sum4_col
assert forall (O E E1 A B C D S : point). sum4 O E E1 A B C D S => ~col O E E1 && col O E A && col O E B && col O E C && col O E D && col O E S.

#sum4_permut
assert forall (O E E1 A B C D S : point). sum4 O E E1 A B C D S => sum4 O E E1 D A B C S.

val O : point.
val E : point.
val E1 : point.
