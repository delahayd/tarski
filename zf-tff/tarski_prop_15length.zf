# $Id$

include "tarski_def.zf".

#14_6
assert forall (A B C A1 B1 C1 : point). bet A B C => cong_3 A B C A1 B1 C1 => bet A1 B1 C1.

#15_3
assert forall (A B C D : point). bet A B D => bet A C D => bet A B C || bet A C B.

#15_6
assert forall (A B C D A1 B1 C1 D1 : point). le A B C D => cong A B A1 B1 => cong C D C1 D1 => le A1 B1 C1 D1.

#16_7
assert forall (P A B C : point). out P A B => out P B C => out P A C.

#16_11_uniqueness
assert forall (A B C R X Y : point). R!=A => B!=C => out A X R => cong A X B C => out A Y R => cong A Y B C => X=Y.

#16_21
assert forall (A B C D P Q : point). ~col A B C => C!=D => col A B P => col A B Q => col C D P => col C D Q => P=Q.

#17_3
assert forall (M A : point). midpoint M A A => M=A.

#17_9
assert forall (P Q A X : point). midpoint A P X => midpoint A Q X => P=Q.

#17_20
assert forall (M A B : point). col A M B => cong M A M B => A=B || midpoint M A B.

#18_7
assert forall (A B C : point). per A B C => per A C B => B=C.

#18_14_2_1b_bis
assert forall (A B C D X : point). perp A B C D => col X A B => col X C D => perp_at X A B C D.

#18_18_existence
assert forall (A B C : point). ~col A B C => (exists (X : point). col A B X && perp A B C X).

#110_16
assert forall (A B C A1 B1 P : point). ~col A B C => ~col A1 B1 P => cong A B A1 B1 => (exists (C1 : point). cong_3 A B C A1 B1 C1 && os A1 B1 P C1).

#111_10
assert forall (A B C D E F A1 C1 D1 F1 : point). congA A B C D E F => out B A1 A => out B C1 C => out E D1 D => out E F1 F => congA A1 B C1 D1 E F1.

#111_13
assert forall (A B C D E F A1 D1 : point). congA A B C D E F => bet A B A1 => A1!=B => bet D E D1 => D1!=E => congA A1 B C D1 E F. 

#111_14
assert forall (A B C A1 C1 : point). bet A B A1 => A!=B => A1!=B => bet C B C1 => B!=C => B!=C1 => congA A B C A1 B1 C1.

#111_47
assert forall (A B C H : point). per A C B => perp_at H C H A B => bet A H B && A!=H && B!=H.

#111_49
assert forall (A B C A1 B1 C1 : point). congA A B C A1 B1 C1 => cong B A B1 A1 => cong B C B1 C1 => cong A C A1 C1 && (A!=C => congA B A C B1 A1 C1 && congA B C A B1 C1 A1).

#112_9
assert forall (A1 A2 B1 B2 C1 C2 : point). perp A1 A2 C1 C2 => perp B1 B2 C1 C2 =>perp A1 A2 B1 B2.

#112_21
assert forall (A B C D : point). ts A C B D => (congA B A C D C A <=> par A B C D). 

#112_22
assert forall (A B C D P : point). out P A C => os P A B D => (congA B A P D C P <=> par A B C D).

#114_36_a
assert forall (O E E1 A B C : point). sum O E E1 A B C => out O A B => bet O A C.

#115_7
assert forall (O E E1 A B C H AB AC AH AC2 : point). O!=E => per A C B => perp_at H C H A B => length O E E1 A B AB => length O E E1 A C AC => length O E E1 A H AH => (prod O E E1 AC AC AC2 <=> prod O E E1 AB AH AC2).

#115_7_1
assert  forall (O E E1 A B C H AB AC AH AC2 : point). O!=E => per A C B => perp_at H C H A B => length O E E1 A B AB => length O E E1 A C AC => length O E E1 A H AH => prod O E E1 AC AC AC2 => prod O E E1 AB AH AC2.

############################"B"########################

#bet_leP
assert forall (O E E1 AB CD : point). bet O AB CD => leP O E E1 O AB => leP O E E1 O CD => leP O E E1 AB CD.

############################"C"########################

#conga_comm
assert forall (A B C D E F : point). congA A B C D E F => congA C B A F E D.

#conga_distinct
assert forall (A B C D E F : point). congA A B C D E F => congA A B C D E F && A!=B && C!=B && D!=E && F!=E.

#conga_trans
assert forall (A B C A1 B1 C1 A2 B2 C2 : point). cong A B C A1 B1 C1 => congA A1 B1 C1 A2 B2 C2 => congA A B C A2 B2 C2.

#cong3_conga
assert forall (A B C A1 B1 C1 : point). A!=B => C!=B => cong_3 A B C A1 B1 C1 => congA A B C A1 B1 C1.

#cong3_preserves_out
assert forall (A B C A1 B1 C1 : point). out A B C => cong_3 A B C A1 B1 C1 => out A1 B1 C1.

############################"D"########################

#diff_A_O
assert forall (O E E1 A : point). ~col O E E1 => col O E A => diff O E E1 A O A.

#diff_sum
assert forall (O E E1 A B S : point). diff O E E1 S A B => sum O E E1 A B S.

#diff_uniqueness
assert forall (O E E1 A B D1 D2 : point). diff O E E1 A B D1 => diff O E E1 A B D2 => D1=D2.

############################"I"########################

#image_preserves_bet
assert forall (A B C A1 B1 C1 X Y : point). X!=Y => reflectL A A1 X Y => reflectL B B1 X Y => reflectL C C1 X Y => bet A B C => bet A1 B1 C1.

#image_preserves_bet1
assert forall (X Y A B C A1 B1 C1 : point). bet A B C => reflect A A1 X Y => reflect B B1 X Y => reflect C C1 X Y => bet A1 B1 C1.

#image_preserves_out
assert forall (X Y A B C A1 B1 C1 : point). out A B C => reflect A A1 X Y => reflect B B1 X Y => reflect C C1 X Y => out A1 B1 C1.

############################"L"########################

#le_transitivity
assert forall (A B C D E F : point). le A B C D => le C D E F => le A B E F.

#length_Ar2
assert forall (O E E1 A B AB : point). length O E E1 A B AB => (col O E AB && ~col O E E1) || AB=O.

#length_cong
assert forall (O E E1 A B AB : point). length O E E1 A B AB => cong A B O AB.

#length_eq_cong_2
assert forall (O E E1 A B C D AB : point). length O E E1 A B AB => cong A B C D => length O E E1 C D AB.

#length_id_1
assert forall (O E E1 A B : point). length O E E1 A B O => A=B.

#length_id_2
assert forall (O E E1 A : point). O!=E => length O E E1 A A O.

#length_out
assert forall (O E E1 A B C D AB CD : point). A!=B => C!=D => length O E E1 A B AB => length O E E1 C D CD => out O AB CD.

#length_sym
assert forall (O E E1 A B AB : point).length O E E1 A B AB => length O E E1 B A AB.

#length_uniqueness
assert forall (O E E1 A B AB AB1 : point). length O E E1 A B AB => length O E E1 A B AB1 => AB=AB1.

#leP_bet
assert forall (O E E1 AB CD : point). leP O E E1 AB CD => leP O E E1 O AB => leP O E E1 O CD => bet O AB CD.

#ltP_pos
assert forall (O E E1 A : point). ltP O E E1 O A => ps O E A.

############################"N"########################

#not_bet_out
assert forall (A B C : point). col A B C => ~bet A B C => out B A C. 

############################"O"########################

#out_conga
assert forall (A B C A1 B1 C1 A0 C0 A2 C2 : point). congA A B C A1 B1 C1 => out B A A0 => out B C C0 => out B1 A1 A2 => out B1 C1 C2 => congA A0 B C0 A2 B1 C2.

#out_one_side
assert forall (A B X Y : point). (~col A B X || ~col A B Y) => out A X Y => os A B X Y.

############################"P"########################

#par_col_par
assert forall (A B C D D1 : point). C!=D1 => par A B C D => col C D D1 => par A B C D1.

#par_not_par
assert forall (A B C D P Q : point). par A B C D => ~par A B P Q => ~par C D P Q.

#par_trans
assert forall (A1 A2 B1 B2 C1 C2 : point). par A1 A2 B1 B2 => par B1 B2 C1 C2 => par A1 A2 C1 C2.

#perp_col
assert forall (A B C D E : point). A!=E => perp A B C D => col A B E => perp A E C D.

#perp_distinct
assert forall (A B C D : point). perp A B C D => A!=B && C!=D.

#perp_not_col
assert forall (A B P : point). perp A B P A => ~col A B P.

#perp_in_col
assert forall (A B C D X : point). perp_at X A B C D => col A B X && col C D X.

#perp_in_distinct
assert forall (X A B C D : point). perp_at X A B C D => A!=B => C!=D.

#perp_in_id
assert forall (A B C X : point). perp_at X A B C A => X=A.

#perp_in_perp_bis
assert forall (A B C D X : point). perp_at X A B C D => perp X B C D || perp A X C D.

#prod_0_1
assert forall (O E E1 A : point). ~col O E E1 => col O E A => prod O E E1 O A O.

#prod_0_r
assert forall (O E E1 A : point). ~col O E E1 => col O E A => prod O E E1 A O O.

#prod_1_1
assert forall (O E E1 A : point). ~col O E E1 => col O E A => prod O E E1 E A A.

#prod_comm
assert forall (O E E1 A B C : point). prod O E E1 A B C => prod O E E1 B A C.

#prod_exists
assert forall (A B : point). col O E A => col O E B => (exists (C : point). prod O E E1 A B C. 

#prod_sym
assert forall (O E E1 A B C : point). prod O E E1 A B C => prod O E E1 B A C.

#prod_uniqueness
assert forall (A B C1 C2 : point). prod O E E1 A B C1 => prod O E E1 A B C2 => C1=C2.

#prod_x_axis_unit_change
assert forall (O E E1 A B C D U : point). ar2_4 O E E1 A B C D => col O E U => U!=O => (exists (X : point). prod O E E1 A B X && prod O E E1 C D X) => (exists (Y : point). prod O U E1 A B Y && prod O U E1 C D Y).

#project_preserves_out
assert forall (A B C A1 B1 C1 P Q X Y : point). out A B C => ~par A B X Y => proj A A1 P Q X Y => proj B B1 P Q X Y => proj C C1 P Q X Y => out A1 B1 C1.

############################"S"########################

#sum_A_O
assert forall (A : point). col O E A => sum O E E1 A O A.

#sum_O_B_eq
assert forall (B C : point). sum O E E1 O B C => B=C.

#sum_O_B
assert forall (B : point). col O E B => sum O E E1 O B B.

#sum_ar2
assert forall (O E E1 A B C : point). sum O E E1 A B C => ar2 O E E1 A B C.

#sum_cong
assert forall (A B C : point). sum O E E1 A B C => (A!=O || B!=O) => parallelogram_flat O A B C.

#sum_exists
assert forall (A B : point). col O E A => col O E B => (exists (C : point). sum O E E1 A B C).

#sum_uniqueness
assert forall (A B C1 C2 : point). sum O E E1 A B C1 => sum O E E1 A B C2 => C1=C2.

#symmetric_point_uniqueness
assert forall (A P P1 P2 : point). midpoint P A P1 => midpoint P A P2 => P1=P2.


############################"T"########################

#thales
assert forall (O E E1 P A B C D A1 B1 C1 D1 AD : point). O!=E => col P A B => col P C D => ~col P A C => pj A C B D => length O E E1 P A A1 => length O E E1 P B B1 => length O E E1 P C C1 => length O E E1 P D D1 => prodg O E E1 A1 D1 AD => prodg O E E1 C1 B1 AD.

#triangular_equality_bis
assert  forall (O E E1 A B C AB BC AC : point). A!=B || C!=B || A!=C => O!=E => bet A B C => length O E E1 A B AB => length O E E1 B C BC => length O E E1 A C AC => sum O E E1 AB BC AC.

val O : point.
val E : point.
val E1 : point.
